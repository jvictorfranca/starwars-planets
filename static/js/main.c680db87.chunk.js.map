{"version":3,"sources":["Context/PlanetsContext.js","Components/CreatedNumberFilter.js","Components/NewFilter.js","Components/Filters.js","Components/NameFilter.js","hooks/useFetchHook.js","Components/PlanetTableItem.js","Components/PlanetsTable.js","Context/PlanetsProvider.js","App.js","index.js"],"names":["PlanetsContext","createContext","CreatedNumberFilter","filter","column","comparison","value","useContext","filters","setFilters","data-testid","className","type","onClick","newfilterByNumericValues","filterByNumericValues","item","prevState","NewFilter","options","useState","setColumn","setComparison","number","setNumber","useEffect","length","action","name","id","onChange","e","target","map","optionValue","index","key","newFilterObject","newFilter","Filters","filtersLeft","setFiltersLeft","forEach","console","log","NameFilter","filterByName","placeholder","useFetchHook","setData","setLoading","fetch","then","response","json","dataValue","results","planetTableItem","planet","rotation","rotation_period","orbital","orbital_period","diameter","climate","gravity","terrain","water","surface_water","population","created","edited","url","films","film","PlanetsTable","data","loading","filteredData","includes","answer","parseInt","compareFunction","PlanetTableItem","PlanetsProvider","children","contextValue","Provider","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c680db87.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst PlanetsContext = createContext();\n\nexport default PlanetsContext;\n","import React, { useContext } from 'react';\nimport propTypes from 'prop-types';\nimport PlanetsContext from '../Context/PlanetsContext';\n\nfunction CreatedNumberFilter({ filter }) {\n  const { column, comparison, value } = filter;\n  const { filters, setFilters } = useContext(PlanetsContext);\n\n  const handleClick = () => {\n    const newfilterByNumericValues = filters.filterByNumericValues\n      .filter((item) => item !== filter);\n    setFilters((prevState) => ({\n      ...prevState,\n      filterByNumericValues: newfilterByNumericValues,\n    }));\n  };\n  return (\n    <section data-testid=\"filter\" className=\"created-filter\">\n\n      <p>{column}</p>\n      <p>{comparison}</p>\n      <p>{value}</p>\n      <button type=\"button\" onClick={ handleClick }>X</button>\n\n    </section>\n\n  );\n}\nCreatedNumberFilter.propTypes = {\n  filter: propTypes.shape({\n    column: propTypes.string,\n    comparison: propTypes.string,\n    value: propTypes.string,\n  }).isRequired,\n};\n\nexport default CreatedNumberFilter;\n","import React, { useContext, useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport PlanetsContext from '../Context/PlanetsContext';\n\nfunction NewFilter({ options }) {\n  const [column, setColumn] = useState('population');\n  const [comparison, setComparison] = useState('maior que');\n  const [number, setNumber] = useState(0);\n  const { filters, setFilters } = useContext(PlanetsContext);\n\n  useEffect(() => {\n    setColumn(options[0]);\n  }, [options]);\n\n  const handleClick = () => {\n    const newFilterObject = {\n      column,\n      comparison,\n      value: number,\n    };\n    const newFilter = {\n      ...filters,\n      filterByNumericValues: [\n        ...filters.filterByNumericValues,\n        newFilterObject,\n      ],\n    };\n    setFilters(newFilter);\n  };\n  return (\n    options.length > 0\n    && (\n      <form action=\"GET\" className=\"new-filter\">\n        {/* <select\n        name=\"column\"\n        id=\"column\"\n        data-testid=\"column-filter\"\n        value={ column }\n        onChange={ (e) => { setColumn(e.target.value); } }\n      >\n        <option value=\"population\">population</option>\n        <option value=\"orbital_period\">orbital_period</option>\n        <option value=\"diameter\">diameter</option>\n        <option value=\"rotation_period\">rotation_period</option>\n        <option value=\"surface_water\">surface_water</option>\n      </select> */}\n\n        <select\n          name=\"column\"\n          id=\"column\"\n          data-testid=\"column-filter\"\n          value={ column }\n          onChange={ (e) => { setColumn(e.target.value); } }\n        >\n          {options.map(((optionValue, index) => (\n            <option\n              value={ optionValue }\n              key={ index }\n            >\n              {optionValue}\n            </option>)\n          ))}\n        </select>\n\n        <select\n          name=\"comparison\"\n          id=\"comparison\"\n          data-testid=\"comparison-filter\"\n          value={ comparison }\n          onChange={ (e) => setComparison(e.target.value) }\n        >\n          <option value=\"maior que\">maior que</option>\n          <option value=\"menor que\">menor que</option>\n          <option value=\"igual a\">igual a</option>\n        </select>\n        <input\n          type=\"number\"\n          data-testid=\"value-filter\"\n          value={ number }\n          onChange={ (e) => setNumber(e.target.value) }\n        />\n        <button\n          type=\"button\"\n          data-testid=\"button-filter\"\n          onClick={ handleClick }\n        >\n          Filtrar\n\n        </button>\n      </form>)\n  );\n}\n\nNewFilter.propTypes = {\n  options: propTypes.arrayOf(propTypes.string).isRequired,\n};\n\nexport default NewFilter;\n","import React, { useContext, useEffect, useState } from 'react';\nimport PlanetsContext from '../Context/PlanetsContext';\nimport CreatedNumberFilter from './CreatedNumberFilter';\nimport NewFilter from './NewFilter';\n\nfunction Filters() {\n  const [filtersLeft, setFiltersLeft] = useState(['population', 'orbital_period',\n    'diameter', 'rotation_period', 'surface_water']);\n  const { filters } = useContext(PlanetsContext);\n\n  useEffect(() => {\n    setFiltersLeft(['population', 'orbital_period',\n      'diameter', 'rotation_period', 'surface_water']);\n    filters.filterByNumericValues.forEach((filter) => {\n      setFiltersLeft((prevState) => prevState.filter((item) => item !== filter.column));\n      console.log(filter);\n    });\n  }, [filters]);\n\n  return (\n    <section>\n      <NewFilter options={ filtersLeft } />\n      <div className=\"filters-container\">\n        {filters.filterByNumericValues\n          .map((filter, index) => (<CreatedNumberFilter\n            filter={ filter }\n            key={ index }\n          />))}\n      </div>\n    </section>\n  );\n}\n\nexport default Filters;\n","import React, { useContext } from 'react';\nimport PlanetsContext from '../Context/PlanetsContext';\n\nfunction NameFilter() {\n  const { filters, setFilters } = useContext(PlanetsContext);\n\n  const handleNameInput = (e) => {\n    setFilters({ ...filters,\n      filterByName: {\n        name: e.target.value,\n      },\n    });\n  };\n\n  return (\n    <input\n      type=\"text\"\n      onChange={ handleNameInput }\n      data-testid=\"name-filter\"\n      value={ filters.filterByName.name }\n      className=\"name-filter\"\n      placeholder=\"Search by name:\"\n    />\n  );\n}\n\nexport default NameFilter;\n","import { useContext, useEffect } from 'react';\nimport PlanetsContext from '../Context/PlanetsContext';\n\nfunction useFetchHook() {\n  const { setData, setLoading } = useContext(PlanetsContext);\n\n  useEffect(() => {\n    setLoading(true);\n    fetch('https://swapi-trybe.herokuapp.com/api/planets/')\n      .then((response) => response.json())\n      .then((dataValue) => {\n        setData(dataValue.results);\n      }).then(setLoading(false));\n  }, [setData, setLoading]);\n}\n\nexport default useFetchHook;\n","import React from 'react';\n\nfunction planetTableItem({ planet }) {\n  const { name, rotation_period: rotation, orbital_period: orbital, diameter, climate,\n    gravity, terrain, surface_water: water, population, created,\n    edited, url, films } = planet;\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{rotation}</td>\n      <td>{orbital}</td>\n      <td>{diameter}</td>\n      <td>{climate}</td>\n      <td>{gravity}</td>\n      <td>{terrain}</td>\n      <td>{water}</td>\n      <td>{population}</td>\n      <td>{created}</td>\n      <td>{edited}</td>\n      <td>{url}</td>\n      <td>{films.map((film) => <p key={ film }>{film}</p>)}</td>\n    </tr>\n  );\n}\n\nexport default planetTableItem;\n","import React, { useContext } from 'react';\nimport PlanetsContext from '../Context/PlanetsContext';\nimport useFetchHook from '../hooks/useFetchHook';\nimport PlanetTableItem from './PlanetTableItem';\n\nfunction PlanetsTable() {\n  useFetchHook();\n  const { data, loading, filters } = useContext(PlanetsContext);\n  let filteredData = data;\n  const compareFunction = (planet, filter) => {\n    let answer;\n    if (filter.comparison === 'maior que') {\n      answer = parseInt(planet[filter.column], 10) > parseInt(filter.value, 10);\n    } else if (filter.comparison === 'menor que') {\n      answer = parseInt(planet[filter.column], 10) < parseInt(filter.value, 10);\n    } else if (filter.comparison === 'igual a') {\n      answer = parseInt(planet[filter.column], 10) === parseInt(filter.value, 10);\n    }\n    return answer;\n  };\n  if (data) {\n    filteredData = data.filter((planet) => planet.name\n      .includes(filters.filterByName.name));\n    filters.filterByNumericValues.forEach((filter) => {\n      filteredData = filteredData.filter((planet) => compareFunction(planet, filter));\n    });\n  }\n\n  return (\n    (loading || !data)\n      ? <span>Loading...</span>\n      : (\n        <table>\n          <thead>\n            <tr>\n              <th>name</th>\n              <th>rotation</th>\n              <th>orbital</th>\n              <th>diameter</th>\n              <th>climate</th>\n              <th>gravity</th>\n              <th>terrain</th>\n              <th>water</th>\n              <th>population</th>\n              <th>created</th>\n              <th>edited</th>\n              <th>url</th>\n              <th>films</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filteredData.map((planet) => (<PlanetTableItem\n              planet={ planet }\n              key={ planet.name }\n            />))}\n          </tbody>\n\n        </table>\n      )\n  );\n}\n\nexport default PlanetsTable;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\n\nfunction PlanetsProvider({ children }) {\n  const [data, setData] = useState();\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: '',\n    },\n    filterByNumericValues: [],\n  });\n  const [loading, setLoading] = useState(false);\n  const contextValue = {\n    data,\n    setData,\n    filters,\n    setFilters,\n    loading,\n    setLoading,\n  };\n  return (\n    <PlanetsContext.Provider value={ contextValue }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nPlanetsProvider.propTypes = {\n  children: propTypes.shape({\n    typeof: 'Symbol(react.element)',\n  }).isRequired,\n};\n\nexport default PlanetsProvider;\n","import React from 'react';\nimport './App.css';\nimport Filters from './Components/Filters';\nimport NameFilter from './Components/NameFilter';\nimport PlanetsTable from './Components/PlanetsTable';\nimport PlanetsProvider from './Context/PlanetsProvider';\n\nfunction App() {\n  return (\n    <PlanetsProvider>\n\n      <main>\n        <NameFilter />\n        <Filters />\n        <PlanetsTable />\n      </main>\n\n    </PlanetsProvider>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n\n  <App />,\n\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}